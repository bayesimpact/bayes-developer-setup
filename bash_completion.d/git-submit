#!/usr/bin/env bash
#
# bash completion support for git-submit

function set_python_git_completion() {
  local python_script="$2" cmd="$1"
  eval "$(register-python-argcomplete --external-argcomplete-script "$python_script" git-submit |
    # Rename the auto-completion function to be caught by git completion.
    sed 's!_python_argcomplete_'"$PYTHON_SCRIPT"'!_git_'"$cmd"'!' |
    # Remove 'git' word from auto-completed line, to avoid parsing 'submit' as an argument to the script.
    sed '/_git_'"$cmd"'/a\
     [[ $COMP_LINE == "git "* ]] && COMP_LINE=${COMP_LINE:4} && ((COMP_POINT-=4));')"
}

if [ -z "$GIT_SUBMIT_EXPERIMENTAL_PYTHON" ]; then
  set_python_git_completion "submit" "$HOME/.bayes-developer-setup/bin/git-submit.py"
  return
fi
readonly ALL_OPTIONS=" -a --abort -f --force -u --user "

__git_submit_options() {
    declare -g _GIT_SUBMIT_FORCE _GIT_SUBMIT_USER_OPT _GIT_SUBMIT_USER _GIT_SUBMIT_ABORT

    # Parse the command line arguments.
    while [[ $# -gt 0 ]]; do
      key="$1"

      case $key in
        -f|--force)
        _GIT_SUBMIT_FORCE="$1"
        shift # past argument
        ;;
        -u|--user)
        _GIT_SUBMIT_USER_OPT="$1"
        _GIT_SUBMIT_USER="$2"
        shift # past argument
        shift # past value
        ;;
        -a|--abort|-r|--rebase)
        _GIT_SUBMIT_ABORT="$1"
        shift # past argument
        ;;
        *)
        shift # ignore value
        ;;
      esac
    done
    # Keep in sync with git-submit.
    if [ -z "$_GIT_SUBMIT_USER" ]; then
      _GIT_SUBMIT_USER=$(git config user.email | sed -e "s/@.*$//")
    fi
}
_git_submit()
{
  __git_submit_options "${COMP_WORDS[@]}"

  local cur=${COMP_WORDS[COMP_CWORD]}
  if [[ $cur == -* ]]; then
    local available_options=""
    if [ -z "$_GIT_SUBMIT_USER_OPT" ]; then
      available_options="${available_options} -u --user "
    fi
    if [ -z "$_GIT_SUBMIT_ABORT" ]; then
      available_options="${available_options} -a --abort "
    fi
    if [ -z "$_GIT_SUBMIT_FORCE" ]; then
      available_options="${available_options} -f --force "
    fi
    if [[ ${#COMPREPLY[@]} == 0 ]] && [[ "$ALL_OPTIONS" == *" $cur "* ]]; then
      COMPREPLY=("$cur ")
    else
      COMPREPLY=( $(compgen -W "$available_options" -- "$cur") )
    fi
    return
  fi
  local available_branches
  if [ -n "$_GIT_SUBMIT_ABORT" ]; then
    available_branches="$(git branch -r --format='%(refname:short)' |
      grep -E "[^/]+/$_GIT_SUBMIT_USER-" |
      sed -E "s~[^/]+/$_GIT_SUBMIT_USER-~~")"
  else
    available_branches="$(__git_heads | grep -vE '^ma(ster|in)$')"
  fi
  __gitcomp "$available_branches"
  unset _GIT_SUBMIT_FORCE _GIT_SUBMIT_USER_OPT _GIT_SUBMIT_USER _GIT_SUBMIT_ABORT
}

complete -F _git_submit git-submit
