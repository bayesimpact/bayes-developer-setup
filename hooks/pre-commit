#!/usr/bin/env bash
#
# Check the staged changes before committing them.

. "$(git --exec-path)/git-sh-setup"  # for cd_to_toplevel, die, say
cd_to_toplevel

function diff_files() {
  local params=()
  while [ -n "$1" ] && [[ "$1" != "--" ]]; do
    params+=("$1")
    shift
  done
  git diff-index --cached "${params[@]}" -M HEAD "$@"
}

function check_circle_config() {
  local config=".circleci/config.yml"
  if [ -n "$GIT_COMMIT_IGNORE_CIRCLECI" ] || [ ! -f $config ]; then
    >&2 say "Not a CircleCI repo."
    return
  fi
  if ! command -v circleci > /dev/null && [ -z "$PRECOMMIT_NO_CIRCLECI_WARNING" ]; then
    >&2 say "It looks like you're using CircleCI,
      but its configuration validating tool is not installed."
    >&2 say "To check configuration changes before committing them, please run 'npm -g i circleci'."
    >&2 say "To avoid showing this message again, please set 'PRECOMMIT_NO_CIRCLECI_WARNING=1'"
    return
  fi
  # Validate the Circle CI config, if it changed.
  diff_files --quiet -- $config || circleci config validate $config > /dev/null ||
    echo "CircleCI config is not valid."
}

function set_difference() {
  # Difference between the two given files, where each file is considered as the set of its lines.
  sort "$1" "$2" "$2" | uniq -u
}

function check_bazel_files() {
  if [ -n "$GIT_COMMIT_IGNORE_BAZEL_FILES" ] || [ ! -f "WORKSPACE" ]; then
    >&2 say "Not a Bazel workspace."
    return
  fi
  local changed_builds=$(mktemp) changed_imports=$(mktemp) untouched_build_files unchanged_tree
  if diff_files --exit-code --name-only -- '**/BUILD' > "$changed_builds"; then
    unchanged_tree=1
  fi
  diff_files --name-only -G'^(|from \S* )import.*' | sed -E 's|/[^/]+$|/BUILD|' | uniq > "$changed_imports"
  untouched_build_files="$(set_difference "$changed_imports" "$changed_builds")"
  rm "$changed_builds" "$changed_imports"
  if [ -n "$untouched_build_files" ]; then
    >&2 say "BUILD files to updates:"
    >&2 say "$untouched_build_files"
    echo 'It looks like some of your import changes were not reported to Bazel.'
    echo "If you're confident with your changes, rerun 'git commit' with GIT_COMMIT_IGNORE_BAZEL_FILES=1 to ignore this hook."
    return 1
  fi
  if test -z "$unchanged_tree"; then
    return 1
  fi
}

function check_bazel_tree() {
  if [ -n "$GIT_COMMIT_IGNORE_BAZEL" ] || [ ! -f "WORKSPACE" ] || ! command -v bazel > /dev/null || test ! -f '.circleci/BUILD'; then
    return
  fi
  if ! bazel query 'deps(//.circleci/...)' > /dev/null; then
    echo 'Bazel resolution failed'
  fi
}

function check_npm_funding() {
  if [ -n "$GIT_COMMIT_IGNORE_NPM_FUNDING" ] || ! command -v jq > /dev/null || [[ $(git config remote.origin.url) != *bayesimpact* ]]; then
    return
  fi
  shopt -s globstar
  local should_give_info
  for package in **/package.json; do
    if ! jq -e '.funding' $package > /dev/null; then
      echo "Please add our funding information to $package"
      should_give_info=1
    fi
    if [ -n "$should_give_info" ]; then
      echo "Add the following line to each file:"
      echo '  "funding": "https://www.helloasso.com/associations/bayes-impact-france/formulaires/5",'
    fi
  done
}

readonly MESSAGE_FILE="$(mktemp)"
check_circle_config >> "$MESSAGE_FILE"
if check_bazel_files >> "$MESSAGE_FILE"; then
  check_bazel_tree >> "$MESSAGE_FILE"
fi
check_npm_funding >> "$MESSAGE_FILE"

readonly MSG="$(cat $MESSAGE_FILE)"
rm "$MESSAGE_FILE"
if [ -n "$MSG" ]; then
  die "$MSG"
fi
