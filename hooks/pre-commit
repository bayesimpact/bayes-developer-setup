#!/usr/bin/env python3
"""Pre commit hooks for git."""

import os
import shutil
import subprocess
from typing import Union
import unittest


def _run(*args: str) -> str:
    return subprocess.check_output(args, text=True).strip()


_ROOT_DIR = _run('git', 'rev-parse', '--show-toplevel')


def _miss_git_file(path: str) -> bool:
    return not os.path.exists(os.path.join(_ROOT_DIR, path))


def _get_diff(*args: str, **kwargs: Union[str, bool]) -> str:
    diff_args = [
        arg
        for key, value in kwargs.items()
        if value
        for arg in (f"{'-' * min(2, len(key))}{key.replace('_', '-')}", value)
        if isinstance(arg, str)]
    return _run('git', 'diff-index', '--cached', *diff_args, 'HEAD', '--', *args)


class PreCommitTestCase(unittest.TestCase):
    """Run tests before commiting changes to git."""

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_CIRCLECI'), 'Ignoring CircleCI config')
    @unittest.skipIf(_miss_git_file('.circleci/config.yml'), 'Not a CircleCI repo')
    @unittest.skipIf(not shutil.which('circleci'), 'CircleCI tool is not installed')
    def test_circle_config(self) -> None:
        """Check that CircleCI's config is valid."""

        config = os.path.join(_ROOT_DIR, '.circleci/config.yml')
        try:
            _get_diff(config, quiet=True)
            return
        except subprocess.CalledProcessError:
            # Config file has been modified. Let's check if it's valid.
            pass
        try:
            _run('circleci', 'config', 'validate', config)
            return
        except subprocess.CalledProcessError:
            self.fail('CircleCI config is not valid.')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_BAZEL_FILES'), 'Ignoring Bazel files')
    @unittest.skipIf(_miss_git_file('WORKSPACE'), 'Not a Bazel workspace')
    def test_bazel_files(self) -> None:
        """Check if enough Bazel files have been changed."""

        changed_builds = set(_get_diff('**/BUILD', name_only=True).split('\n'))
        changed_imports = {
            os.path.join(os.path.dirname(file), 'BUILD')
            # TODO(cyrille): Do a finer check on the changed imports.
            for file in _get_diff(name_only=True, G=r'^(from \S* )?import.*').split('\n')}
        self.assertEqual(
            changed_builds, changed_imports,
            msg='It looks like some of your import changes were not reported to Bazel.'
            "If you're confident with your changes, re-run 'git commit' with "
            'GIT_COMMIT_IGNORE_BAZEL_FILES=1 to ignore this hook.')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_BAZEL'), 'Ignoring Bazel tree')
    @unittest.skipIf(_miss_git_file('WORKSPACE'), 'Not a Bazel workspace')
    @unittest.skipIf(_miss_git_file('.circleci/BUILD'), 'No Bazel rules defined for CircleCI')
    @unittest.skipIf(not shutil.which('bazel'), 'Bazel is not installed')
    def test_bazel_tree(self) -> None:
        """Check that Bazel can parse its dependency tree."""

        try:
            _run('bazel', 'query', 'deps(//.circleci/...)')
        except subprocess.CalledProcessError:
            self.fail('Bazel resolution failed')


if __name__ == '__main__':
    unittest.main(verbosity=0, buffer=True)
