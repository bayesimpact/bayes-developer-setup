#!/usr/bin/env python3
"""Pre commit hooks for git."""

import functools
import json
import logging
import os
import re
import shutil
import subprocess
from typing import Optional, Union
import unittest

try:
    import isort

    def _is_python_stdlib(lib_name: str, /) -> bool:
        return isort.place_module(lib_name) == isort.sections.STDLIB
except ImportError:
    def _is_python_stdlib(unused_lib_name: str, /) -> bool:
        return False


def _run(*args: str, silently: bool = False) -> str:
    try:
        return subprocess.check_output(args, text=True).strip()
    except subprocess.CalledProcessError:
        if silently:
            return ''
        raise


@functools.cache
def _node_default_imports() -> set[str]:
    node_exec = shutil.which('node')
    if not node_exec:
        return set()
    try:
        return set(
            json.loads(_run(node_exec, '-p', 'JSON.stringify(require("repl")._builtinLibs)')))
    except json.decoder.JSONDecodeError as error:
        logging.warning('Unable to load node builtin libs.', exc_info=error)
        return set()


def _is_node_stdlib(lib_name: str) -> bool:
    return lib_name.rsplit('.', 1)[-1].strip('\'"') in _node_default_imports()


def _is_stdlib(lib_name: str, filename: str, /) -> bool:
    if filename.removesuffix('x').endswith('.ts'):
        return _is_node_stdlib(lib_name)
    # Python scripts may not have a '.py' extension, so we don't check for it.
    return _is_python_stdlib(lib_name)


_DIFF_LINE_REGEX = re.compile(r'^[-+]\s+')
_PYTHON_IMPORT_REGEX = re.compile(r'^(from (\S+) )?import (.*)')

_ROOT_DIR = _run('git', 'rev-parse', '--show-toplevel')


def _miss_git_file(path: str) -> bool:
    return not os.path.exists(os.path.join(_ROOT_DIR, path))


def _get_diff(*args: str, **kwargs: Union[str, bool]) -> str:
    diff_args = [
        arg
        for key, value in kwargs.items()
        if value
        for arg in (f"{'-' * min(2, len(key))}{key.replace('_', '-')}", value)
        if isinstance(arg, str)]
    return _run('git', 'diff', '--cached', *diff_args, 'HEAD', '--', *args)


# TODO(cyrille): Separate better silent imports from others.
def _get_packages(python_content: str, filename: str) -> set[str]:
    return {
        lib
        for line in python_content.split('\n')
        if line
        if (match := _PYTHON_IMPORT_REGEX.match(line))
        if not _is_stdlib(
            lib := '.'.join(filter(None, [match.group(2), match.group(3)])), filename)}


def _changed_imports(file: str, previous_file: Optional[str] = None) \
        -> tuple[set[str], set[str]]:
    with open(file, encoding='utf-8') as current_file:
        current_packages = _get_packages(current_file.read(), file)
    old_packages = _get_packages(
        _run('git', 'show', f'HEAD:{previous_file or file}'), previous_file or file)
    return old_packages, current_packages


class PreCommitTestCase(unittest.TestCase):
    """Run tests before commiting changes to git."""

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_CIRCLECI'), 'Ignoring CircleCI config')
    @unittest.skipIf(_miss_git_file('.circleci/config.yml'), 'Not a CircleCI repo')
    @unittest.skipIf(not shutil.which('circleci'), 'CircleCI tool is not installed')
    def test_circle_config(self) -> None:
        """Check that CircleCI's config is valid."""

        config = os.path.join(_ROOT_DIR, '.circleci/config.yml')
        try:
            _get_diff(config, quiet=True)
            return
        except subprocess.CalledProcessError:
            # Config file has been modified. Let's check if it's valid.
            pass
        try:
            _run('circleci', 'config', 'validate', config)
            return
        except subprocess.CalledProcessError:
            self.fail('CircleCI config is not valid.')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_BAZEL_FILES'), 'Ignoring Bazel files')
    @unittest.skipIf(_miss_git_file('WORKSPACE'), 'Not a Bazel workspace')
    def test_bazel_files(self) -> None:
        """Check if enough Bazel files have been changed."""

        changed_builds = {b for b in _get_diff('**/BUILD', name_only=True).split('\n') if b}
        for file in _get_diff(name_only=True, G=_PYTHON_IMPORT_REGEX.pattern).split('\n'):
            # TODO(cyrille): Do a finer check on the changed BUILD file.
            if (build := os.path.join(os.path.dirname(file), 'BUILD')) in changed_builds:
                continue
            with self.subTest(file=file, build=build):
                self.assertEqual(
                    *_changed_imports(file),
                    msg='It looks like some of your import changes were not reported to Bazel.\n'
                    'If you are confident with your changes, re-commit your changes with '
                    'GIT_COMMIT_IGNORE_BAZEL_FILES=1 to ignore this hook.')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_BAZEL_FILES'), 'Ignoring Bazel files')
    @unittest.skipIf(_miss_git_file('WORKSPACE'), 'Not a Bazel workspace')
    def test_files_in_bazel(self) -> None:
        """Check if diff files are in the Bazel tree."""

        changed_files = (
            file
            for file in _get_diff(name_only=True).split('\n')
            if os.path.exists(file))
        try:
            _run('bazel', 'query', f'set({" ".join(changed_files)})')
        except subprocess.CalledProcessError:
            self.fail('Some changed files are not in Bazel dependency tree')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_BAZEL'), 'Ignoring Bazel tree')
    @unittest.skipIf(_miss_git_file('WORKSPACE'), 'Not a Bazel workspace')
    @unittest.skipIf(_miss_git_file('.circleci/BUILD'), 'No Bazel rules defined for CircleCI')
    @unittest.skipIf(not shutil.which('bazel'), 'Bazel is not installed')
    def test_bazel_tree(self) -> None:
        """Check that Bazel can parse its dependency tree."""

        try:
            _run('bazel', 'query', 'deps(//.circleci/...)')
        except subprocess.CalledProcessError:
            self.fail('Bazel resolution failed')

    @unittest.skipIf(os.getenv('GIT_COMMIT_IGNORE_NPM_FUNDING'), 'Ignoring NPM funding')
    @unittest.skipIf(
        'bayesimpact' not in _run('git', 'config', 'remote.origin.url', silently=True),
        'Not a Bayes repo')
    def test_npm_funding(self) -> None:
        """Check that package.json files have funding information."""

        for package in _run('git', 'ls-files', '--', '**/package.json').split('\n'):
            with self.subTest(file=package):
                with open(os.path.join(_ROOT_DIR, package), 'rb') as json_file:
                    content = json.load(json_file)
                self.assertIn(
                    'funding', content,
                    msg=f'NPM file "{package}" should contain our funding information:\n'
                    '\thttps://www.helloasso.com/associations/bayes-impact-france/formulaires/5')


def main() -> None:
    """Execute the relevant hooks."""

    should_show_skipping_reason = bool(os.getenv('GIT_PRECOMMIT_SKIPPING_REASONS'))
    unittest.main(verbosity=2 if should_show_skipping_reason else 0, buffer=True)


if __name__ == '__main__':
    main()
