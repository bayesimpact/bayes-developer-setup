#!/bin/bash
#
# Check the staged changes before committing them.

. "$(git --exec-path)/git-sh-setup"  # for cd_to_toplevel, die, say
cd_to_toplevel

function diff_files() {
  local params=()
  while [ -n "$1" ] && [[ "$1" != "--" ]]; do
    params+=("$1")
    shift
  done
  git diff-index --cached "${params[@]}" -M HEAD "$@"
}

function check_circle_config() {
  local config=".circleci/config.yml"
  if [ -n "$GIT_COMMIT_IGNORE_CIRCLECI" ] || [ ! -f $config ]; then
    >&2 say "Not a CircleCI repo."
    return
  fi
  if ! command -v circleci > /dev/null && [ -z "$PRECOMMIT_NO_CIRCLECI_WARNING" ]; then
    >&2 say "It looks like you're using CircleCI,
      but its configuration validating tool is not installed."
    >&2 say "To check configuration changes before committing them, please run 'npm -g i circleci'."
    >&2 say "To avoid showing this message again, please set 'PRECOMMIT_NO_CIRCLECI_WARNING=1'"
    return
  fi
  # Validate the Circle CI config, if it changed.
  diff_files --quiet -- $config || circleci config validate $config > /dev/null ||
    echo "CircleCI config is not valid."
}

function set_difference() {
  # Difference between the two given files, where each file is considered as the set of its lines.
  sort "$1" "$2" "$2" | uniq -u
}

function check_bazel_build() {
  if [ -n "$GIT_COMMIT_IGNORE_BAZEL" ] || [ ! -f "WORKSPACE" ]; then
    >&2 say "Not a Bazel workspace."
    return
  fi
  local changed_builds=$(mktemp) changed_imports=$(mktemp) untouched_build_files
  diff_files --name-only -- '**/BUILD' > "$changed_builds"
  diff_files --name-only -G'^(|from \S* )import.*' | sed -E 's|/[^/]+$|/BUILD|' | uniq > "$changed_imports"
  untouched_build_files="$(set_difference "$changed_imports" "$changed_builds")"
  rm "$changed_builds" "$changed_imports"
  if [ -n "$untouched_build_files" ]; then
    >&2 say "BUILD files to updates:"
    >&2 say "$untouched_build_files"
    echo 'It looks like some of your import changes were not reported to Bazel. Rerun `git commit` with GIT_COMMIT_IGNORE_BAZEL=1 to ignore this hook.'
    return
  fi
  if ! command -v bazel > /dev/null || test ! -s "$changed_builds" || test ! -f '.circleci/BUILD'; then
    return
  fi
  if ! bazel query 'deps(//.circleci/...)' > /dev/null; then
    echo 'Bazel resolution failed'
  fi
}

readonly MESSAGE_FILE="$(mktemp)"
check_circle_config >> "$MESSAGE_FILE"
check_bazel_build >> "$MESSAGE_FILE"

if [ -s "$MESSAGE_FILE" ]; then
  readonly MSG="$(cat $MESSAGE_FILE)"
  rm "$MESSAGE_FILE"
  die "$MSG"
fi
