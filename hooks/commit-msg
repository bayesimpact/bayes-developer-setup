#!/bin/bash
#
# Commit message hook to ensure the message follows our guidelines.
# See go/wiki/CommitMessageStyleGuide.
# To add them to a project, use `git config core.hooksPath $BAYES_DEV_SETUP_FOLDER/hooks`.

. "$(git --exec-path)/git-sh-setup"  # for die
readonly COMMIT_MSG="$(grep -v ^# "$1")"

readonly TOPIC_MAX_LENGTH=15
readonly SUBJECT_MAX_LENGTH=59
readonly BODY_MAX_LENGTH=72

# A commit topic with title case. Matches "[Short Topic]" but not "[short topic]"
readonly TOPIC_REGEX='^\[[A-Z][\w-]*( [A-Z][\w-]*)*\]'
# A commit subject. Matches "] This is the commit subject." (with set maximum length)
# TODO(cyrille): Make sure the first char is an uppercase letter.
readonly SUBJECT_REGEX='(?<=\] ).{2,'"$SUBJECT_MAX_LENGTH"'}\.$'
# A line which probably references a flag (either an issue or a var).
# Matches "Close #1234", "var = value", "For #23455, do something", "ENV=value"
readonly PROBABLE_FLAG_REGEX='^\w+\s*(=|#\d+)'
# A line which probably references an issue. Matches "Close #1234", "For #1234 something"
readonly PROBABLE_ISSUE_REGEX='^\w+\s*#\d+'
# A line which is a correct issue(s) reference. Matches "For #1234", "Fix #1234, 2345"
readonly PROPER_ISSUE_REGEX='^(For|Fix) #\d+(, #\d+)*$'
# A line which probably defines a variable. Matches "var = value", "ENV=value"
readonly PROBABLE_VAR_REGEX='^[A-Z]+\s*='
# A line whis is a correct variable definition. Matches "ENV=value", "ENV="
readonly PROPER_VAR_REGEX='^[A-Z]+=(\S|$)'


# Ensure context format and length.
grep -qP "$TOPIC_REGEX" <<< "$COMMIT_MSG" ||
  die 'Message should start with a bracketed title-cased topic. E.g. "[Title Case]"'
(( BRACKET_LENGTH = 2 + TOPIC_MAX_LENGTH ))
[[ $(grep -P '.*?\]' | wc -c) -lt $BRACKET_LENGTH ]] ||
  die 'Message topic '"$(head -n1 <<< "$COMMIT_MSG")"' should be at most '"$TOPIC_MAX_LENGTH"' characters long.'

# Ensure subject format and length.
readonly SUBJECT=$(head -n1 <<< "$COMMIT_MSG")
grep -qP "$SUBJECT_REGEX" <<< "$SUBJECT" ||
  die 'Commit message should be no more than '"$SUBJECT_MAX_LENGTH"`
  `' characters long, start with an uppercase letter and end with a period.
  Example: "Fix the padding on the landing title."'
if [[ "$SUBJECT" == "$COMMIT_MSG" ]]; then
  exit
fi

# Ensure subject is separated from the body with an empty line.
head -n2 <<< "$COMMIT_MSG" | tail -n1 | grep -qv '.' ||
  die 'Commit subject should be separated from body with an empty line.'

readonly BODY_AND_FLAGS="$(tail -n +3 <<< "$COMMIT_MSG")"
FLAGS=$(awk -v RS= '{paragraph=$0} END {print paragraph}' <<< "$BODY_AND_FLAGS")

# Check whether the last paragraph of the body has flags (issue reference or commit variable).
if grep -qP "$PROBABLE_FLAG_REGEX" <<< "$FLAGS"; then
  # Ensure variables are uppercase and without spacing.
  grep -P "$PROBABLE_VAR_REGEX" <<< "$FLAGS" | grep -vP "$PROPER_VAR_REGEX" &&
    die 'Commit variables assignment should be bash-like: "VAR=value".'
  # Ensure the issue reference is well formated: "For #1234, #2345".
  grep -P "$PROBABLE_ISSUE_REGEX" <<< "$FLAGS" | grep -vP "$PROPER_ISSUE_REGEX" &&
    die 'Issue references should be introduced by either "For" or "Fix" and separated by ", ".'
else
  FLAGS=""
fi

if [ -z "$FLAGS" ]; then
  readonly BODY="$BODY_AND_FLAGS"
else
  readonly BODY="$(head -n -"$(wc -l <<< "$FLAGS")" <<< "$BODY_AND_FLAGS")"
fi

# Ensure there are no variables or references in the body.
grep -P "$PROBABLE_FLAG_REGEX" <<< "$BODY" &&
  die 'Commit variables and issue references should be in the last paragraph of the message.'
# Ensure the body is no more than 72 chars wide, except for long URLs.
[[ $(grep -vP 'https?://\S{50}' <<< "$BODY" | wc -L) -lt $BODY_MAX_LENGTH ]] ||
  die 'Commit body should be no wider than '"$BODY_MAX_LENGTH"' chars.'

