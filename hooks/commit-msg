#!/bin/bash

. "$(git --exec-path)/git-sh-setup"  # for die
readonly COMMIT_MSG=$1

readonly CONTEXT_MAX_LENGTH=15
readonly SUBJECT_MAX_LENGTH=59
readonly BODY_MAX_LENGTH=72

grep -qP '^\[[^\]]{1,'"$CONTEXT_MAX_LENGTH"'}\]' <<< "$COMMIT_MSG" ||
  die 'Message should start with a bracketed topic of maximum length '"$CONTEXT_MAX_LENGTH"'. E.g. "[Clean Code]"'

readonly SUBJECT=$(head -n1 <<< "$COMMIT_MSG")
grep -qP '(?<=\] ).{1,'"$SUBJECT_MAX_LENGTH"'}\.$' <<< "$SUBJECT" ||
  die 'Commit message should be no more than '"$SUBJECT_MAX_LENGTH"' characters long, start with an uppercase letter and end with a period.'
if [[ "$SUBJECT" == "$COMMIT_MSG" ]]; then
  exit
fi
head -n2 <<< "$COMMIT_MSG" | tail -n1 | grep -qv '.' ||
  die 'Commit subject should be separated from body with an empty line.'

readonly BODY_AND_FLAGS="$(tail -n +3 <<< "$COMMIT_MSG")"
FLAGS=$(awk -v RS='' '{paragraph=$0} END {print paragraph}' <<< "$BODY_AND_FLAGS")
if head -n1 <<< "$FLAGS" | grep -qP '(^[A-Z]{2}|#\d+)'; then
  # FLAGS is actually a paragraph with flags, lets check them all.
  ISSUE_REF="$(tail -n1 <<< "$FLAGS")"
  if [[ "$ISSUE_REF" =~ \#(\d+) ]]; then
    readonly PR_NUMBER="${BASH_REMATCH[0]}"
    [[ $ISSUE_REF == "For #"$PR_NUMBER ]] ||
      [[ $ISSUE_REF == "Fix #"$PR_NUMBER ]] ||
      die 'Issue reference should either be introduced by "For" or "Fix".'
    VARS="$(head -n -1 <<< "$FLAGS")"
  else
    VARS="$FLAGS"
  fi
  grep -P '#\d+' <<< "$VARS" &&
    die 'Issue reference should be on the last line of the message.'
  grep -vP '^[A-Z]+\s*=' <<< "$VARS" &&
    die 'Commit variables should be in uppercase.'
  grep -vP '^[A-Z]+=(\S|$)' <<< "$VARS" &&
    die 'Commit variables assignment should be bash-like: "VAR=value".'
else
  FLAGS=""
fi

readonly BODY="$(head -n -"$(wc -l <<< "$FLAGS")" <<< "$BODY_AND_FLAGS")"
[[ $(wc -L <<< "$BODY") -lt $BODY_MAX_LENGTH ]] ||
  die 'Commit body should be no wider than '"$BODY_MAX_LENGTH"' chars.'

