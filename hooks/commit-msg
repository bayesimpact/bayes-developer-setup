#!/bin/bash
#
# Commit message hook to ensure the message follows our guidelines.
# See go/wiki/CommitMessageStyleGuide.
# To add them to a project, use `git config core.hooksPath $BAYES_DEV_SETUP_FOLDER/hooks`.

. "$(git --exec-path)/git-sh-setup"  # for die
readonly COMMIT_MSG=$1

readonly CONTEXT_MAX_LENGTH=15
readonly SUBJECT_MAX_LENGTH=59
readonly BODY_MAX_LENGTH=72

readonly TOPIC_REGEX='^\[[^\]]{2,'"$CONTEXT_MAX_LENGTH"'}\]'
readonly SUBJECT_REGEX='(?<=\] ).{2,'"$SUBJECT_MAX_LENGTH"'}\.$'
readonly PROBABLE_FLAG_REGEX='^\w+\s*(=|#\d+)'
readonly PROBABLE_ISSUE_REGEX='^\w+\s*#\d+'
readonly PROBABLE_VAR_REGEX='^[A-Z]+\s*='
readonly PROPER_ISSUE_REGEX='^(For|Fix) #\d+(, #\d+)*$'
readonly PROPER_VAR_REGEX='^[A-Z]+=(\S|$)'


# Ensure context format and length.
grep -qP "$TOPIC_REGEX" <<< "$COMMIT_MSG" ||
  die 'Message should start with a bracketed topic of maximum length '"$CONTEXT_MAX_LENGTH"'. E.g. "[Clean Code]"'

# Ensure subject format and length.
readonly SUBJECT=$(head -n1 <<< "$COMMIT_MSG")
grep -qP "$SUBJECT_REGEX" <<< "$SUBJECT" ||
  die 'Commit message should be no more than '"$SUBJECT_MAX_LENGTH"`
  `' characters long, start with an uppercase letter and end with a period.
  Example: "Fix the padding on the landing title."'
if [[ "$SUBJECT" == "$COMMIT_MSG" ]]; then
  exit
fi

# Ensure subject is separated from the body with an empty line.
head -n2 <<< "$COMMIT_MSG" | tail -n1 | grep -qv '.' ||
  die 'Commit subject should be separated from body with an empty line.'

readonly BODY_AND_FLAGS="$(tail -n +3 <<< "$COMMIT_MSG")"
FLAGS=$(awk -v RS= '{paragraph=$0} END {print paragraph}' <<< "$BODY_AND_FLAGS")

# Check whether the last paragraph of the body has flags (issue reference or commit variable).
if grep -qP "$PROBABLE_FLAG_REGEX" <<< "$FLAGS"; then
  ISSUE_REF="$(tail -n1 <<< "$FLAGS")"
  # Check whether the last flag is an issue reference.
  if grep -qP "$PROBABLE_ISSUE_REGEX" <<< "$ISSUE_REF"; then
    # Ensure the issue reference is well formated: "For #1234, #2345".
    grep -qP "$PROPER_ISSUE_REGEX" <<< "$ISSUE_REF" ||
      die 'Issue references should be introduced by either "For" or "Fix" and separated by ", ".'
    FOR_OR_FIX="$(cut -c-3 <<< "$ISSUE_REF")"
    VARS="$(head -n -1 <<< "$FLAGS")"
    ISSUE_REF="$(tail -n1 <<< "$VARS")"
    # Check whether the penultimate flag is an issue reference.
    if grep -qP "$PROBABLE_ISSUE_REGEX" <<< "$ISSUE_REF"; then
      # Ensure "Fix" is before "For".
      [[ $FOR_OR_FIX == For ]] || die 'Fixed issued should be given before reference:
        Fix #1234
        For #4321'
      # Ensure the issue reference is well formated: "Fix #1234, #2345".
      grep -qP "$PROPER_ISSUE_REGEX" <<< "$ISSUE_REF" && [[ $(cut -c-3 <<< "$ISSUE_REF") == Fix ]] ||
        die 'Fixed issues should be introduced by "Fix" and separated by ", ".'
      VARS="$(head -n -1 <<< "$VARS")"
    fi
  else
    VARS="$FLAGS"
  fi
  if [ -z "$VARS" ]; then
    exit
  fi
  # Ensure there's no issue reference outside the last line of the flags.
  grep -P "$PROBABLE_ISSUE_REGEX" <<< "$VARS" &&
    die 'Issue references should be on the last line of the message.'
  # Ensure variables are uppercase.
  grep -vP "$PROBABLE_VAR_REGEX" <<< "$VARS" &&
    die 'Commit variables should be in uppercase.'
  # Ensure variables are set without spacing.
  grep -vP "$PROPER_VAR_REGEX" <<< "$VARS" &&
    die 'Commit variables assignment should be bash-like: "VAR=value".'
else
  FLAGS=""
fi

readonly BODY="$(head -n -"$(wc -l <<< "$FLAGS")" <<< "$BODY_AND_FLAGS")"
# TODO(cyrille): Check that the body doesn't include references or variables.
[[ $(wc -L <<< "$BODY") -lt $BODY_MAX_LENGTH ]] ||
  die 'Commit body should be no wider than '"$BODY_MAX_LENGTH"' chars.'

