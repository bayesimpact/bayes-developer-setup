#!/bin/bash
#
# A git custom command to submit a reviewed branch.
# Usage:
#   git submit [<branch>]
#   Submits the given or the current branch.
#
# It ensures that the modifications of the branch are rebased on the remote
# master as exactly one commit. It also cleans up the branch locally and
# remotely.
#
# To install it, copy it or link it from /usr/local/bin/git-submit and gzip the
# manpage to /usr/local/man/man1.

# Find the branch to submit.
if [ "$1" == "-f" ] || [ "$1" == "--force" ]; then
  BRANCH="$2"
  FORCE_SUBMIT="$1"
else
  BRANCH="$1"
  FORCE_SUBMIT="$2"
fi
if [ -z "${BRANCH}" ]; then
  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  if [ "${BRANCH}" == "master" ]; then
    echo "branch required:" 1>&2
    git branch | grep -v \ master$ 1>&2
    exit 1
  fi
fi

# Enable specific option if user has the experimental GIT_SUBMIT_EXPERIMENTAL env var set.
readonly SQUASH_ON_GITHUB="${GIT_SUBMIT_EXPERIMENTAL}"

# Ensures that current dir is clean.
if [ -n "$(git diff HEAD --shortstat 2> /dev/null | tail -n1)" ]; then
  echo "Current git status is dirty. Commit, stash or revert your changes before submitting." 1>&2
  exit 2
fi

if ! git rev-parse --verify "${BRANCH}" 2>&1 > /dev/null; then
  echo "${BRANCH} is not a valid branch." 1>&2
  exit 8
fi

# Ensures that the Continuous Integration is successful.
if [ -x "$(which hub)" ]; then
  readonly CI_STATUS="$(hub ci-status "${BRANCH}")"
  if [ "${CI_STATUS}" != "success" ]; then
    if [ "${FORCE_SUBMIT}" == "-f" ] || [ "${FORCE_SUBMIT}" == "--force" ]; then
      echo "WARNING: forcing submission despite CI status \"${CI_STATUS}\"."
    else
      echo "Continuous integration is \"${CI_STATUS}\", use \"-f\" to submit anyway:"
      hub ci-status -v "${BRANCH}"
      exit 11
    fi
  fi
fi

# Get latest code from remote.
git fetch

# The name of the remote used for master, usually "origin".
readonly BASE_REMOTE="$(git config branch.master.remote)"
# The full name of the remote master branch, usually "origin/master".
readonly BASE_BRANCH="${BASE_REMOTE}/master"
# Git hash of the latest status of remote master.
readonly BASE_MASTER="$(git rev-parse "${BASE_BRANCH}")"
# Git hash of the current branch to submit.
readonly BRANCH_INITIAL="$(git rev-parse "${BRANCH}")"
# The name of the remote tracked by this branch, usually "origin".
readonly BRANCH_REMOTE="$(git config "branch.${BRANCH}.remote")"
# The name of the remote branch tracked by this one.
readonly BRANCH_MERGE="$(git config "branch.${BRANCH}.merge" | sed -e s/^refs\\/heads\\///)"

# Abort all changes and restore initial state before exiting.
function abort {
  echo "Something went wrong, aborting:" 1>&2

  echo "  Set branch master to ${BASE_MASTER}." 1>&2
  git checkout -f master
  git reset --hard "${BASE_MASTER}"

  echo "  Set branch ${BRANCH} to ${BRANCH_INITIAL}." 1>&2
  git checkout -f "${BRANCH}"
  git reset --hard "${BRANCH_INITIAL}"

  exit 7
}

# Check that the changes are bundled as one commit on top of origin/master.
while [ "${BASE_MASTER}" != "$(git rev-parse "${BRANCH}^")" ]; do
  if [ "${BASE_MASTER}" == "$(git rev-parse "${BRANCH}")" ]; then
    echo "No changes to submit."
    exit 3
  fi
  if ( git merge-base --is-ancestor "$(git rev-parse "${BRANCH}^")" "${BASE_MASTER}" ); then
    # There is only one new commit, but it's based on an old version of master.
    if [[ -z "${SQUASH_ON_GITHUB}" ]] && ! (git rebase "${BASE_BRANCH}" "${BRANCH}"); then
      git rebase --abort
      exit 10
    fi
    break
  else
    echo "You should first group all your changes in one commit:" 1>&2
    echo "  git rebase -i ${BASE_BRANCH} ${BRANCH}" 1>&2
    if [[ -n "${SQUASH_ON_GITHUB}" ]]; then
      exit 12
    fi
    read -p "Rebase now? [y/N]" answer
    if [ "${answer}" == "y" ] || [ "${answer}" == "Y" ]; then
      if ! (git rebase -i "${BASE_BRANCH}" "${BRANCH}"); then
        git rebase --abort
        exit 9
      fi
    else
      exit 4
    fi
  fi
done

# Check that the branch is tracking a remote branch.
if [ -z "${BRANCH_REMOTE}" ]; then
  echo "The branch ${BRANCH} is not tracked and has probably never been reviewed." 1>&2
  echo "  git push -u ${BASE_REMOTE} ${BRANCH}"
  read -p "Push now? [y/N]" answer
  if [ "${answer}" == "y" ] || [ "${answer}" == "Y" ]; then
    git push -u ${BASE_REMOTE} ${BRANCH} || abort
  fi
  exit 5
fi

if [ -n "${SQUASH_ON_GITHUB}" ]; then
  # Get OAuth Token.
  # We use the hub config located in ~/.config/hub, it's a yaml file with first
  # level keys being the server domains. And then it has a subkey with
  # oauth_token:
  #   github.com
  #   - user: pcorpet
  #     oauth_token: 0123456789abcdef
  #     protocol: https
  #   entreprise.github.com
  #   - user: pascal
  #     oauth_token: abcdef0123456789
  readonly GITHUB_OAUTH_TOKEN="$(sed -n '/^github.com/,$p' ~/.config/hub | grep oauth_token | head -1 | cut -d: -f2 | sed -e "s/ //")"
  if [ -z "${GITHUB_OAUTH_TOKEN}" ]; then
    echo "Could not find OAuth Token to connect to GitHub API." 1>&2
    abort
  fi

  # Get GitHub repo name.
  # The remote URL is "git@github.com:bayesimpact/new-project.git" and we want
  # to extract "bayesimpact" and "new-project".
  if ! [[ "$(git remote get-url "${BRANCH_REMOTE}")" =~ ^git@github.com:(.*)/(.*).git$ ]]; then
    echo "Could not find the GitHub repository's name." 1>&2
    abort
  fi
  readonly GITHUB_REPO_USER="${BASH_REMATCH[1]}"
  readonly GITHUB_REPO_NAME="${BASH_REMATCH[2]}"

  # Find pull-request ID.
  readonly PULL_REQUEST_NUMBER="$(curl -s \
    -H "Authorization: token ${GITHUB_OAUTH_TOKEN}" \
    "https://api.github.com/repos/${GITHUB_REPO_USER}/${GITHUB_REPO_NAME}/pulls?base=master&head=${GITHUB_REPO_USER}:${BRANCH_MERGE}" | \
    # The result is a large JSON nicely indented with one property per line,
    # and we search for the "number" property: '  "number": 1234' -> '1234'.
    grep '"number"' | sed -e "s/^.*: //;s/,//")"
  if [[ -z "${PULL_REQUEST_NUMBER}" ]]; then
    echo "Could not find the Pull Request number." 1>&2
    abort
  fi

  # Ask GitHub to do the squash and merge!
  curl --fail -X PUT -H "Authorization: token ${GITHUB_OAUTH_TOKEN}" \
    "https://api.github.com/repos/${GITHUB_REPO_USER}/${GITHUB_REPO_NAME}/pulls/${PULL_REQUEST_NUMBER}/merge" \
    --data "{\"merge_method\": \"squash\", \"sha\": \"${BRANCH_INITIAL}\"}" || abort

  # Update master locally.
  git checkout master
  git pull --ff-only
else
  # Check that the remote branch is synced with the local one.
  if [ "$(git rev-parse "${BRANCH_REMOTE}/${BRANCH_MERGE}")" != "$(git rev-parse "${BRANCH}")" ]; then
    echo "Push your branch on ${BRANCH_REMOTE}, or you'll have a hard time removing the pull request:" 1>&2
    echo "  git push -f ${BRANCH_REMOTE} ${BRANCH}:${BRANCH_MERGE}"
    git push -f "${BRANCH_REMOTE}" "${BRANCH}:${BRANCH_MERGE}" || abort
  fi

  # Update master locally.
  git checkout master
  if ! (git rebase "${BRANCH}"); then
    git rebase --abort
    abort
  fi

  # Push updated master to remote.
  git push "${BASE_REMOTE}" master || abort
fi

# Remove branch locally and remotely.
if [[ "${BRANCH}" == "$(git rev-parse --abbrev-ref HEAD)" ]]; then
  git checkout master
fi
git branch -D "${BRANCH}"
git push ${BRANCH_REMOTE} ":${BRANCH_MERGE}"
